name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DEPLOY_PATH: /home/app
  SERVER_DOMAIN: 103.88.241.21
  SERVER_USER: root

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - run: pip install ruff
      - run: ruff check .

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      # Установка Docker и логин в Docker Hub
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Создание .env из секрета
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 --decode > .env

      # Сборка Docker-образа
      - name: Build Docker image
        run: docker compose --env-file=.env build

      # Сохранение Docker-образа в tar-файл
      - name: Save Docker image
        run: |
          docker save -o bot.tar bot:latest
          docker save -o server.tar server:latest

      # Настройка SSH ключа
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-agent sh -c "ssh-add ~/.ssh/id_rsa"
          ssh-keyscan -H ${{ env.SERVER_DOMAIN }} >> ~/.ssh/known_hosts

      # Создание удаленной директории, если она не существует
      - name: Create remote directory if it doesn't exist
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} \
            "mkdir -p $DEPLOY_PATH"

      # Генерация SSL сертификатов на сервере
      - name: Generate SSL certificates on server
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} "
            mkdir -p $DEPLOY_PATH/ssl
            if [ ! -f $DEPLOY_PATH/ssl/cert.pem ] || [ ! -f $DEPLOY_PATH/ssl/key.pem ]; then
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout $DEPLOY_PATH/ssl/key.pem \
                -out $DEPLOY_PATH/ssl/cert.pem \
                -subj '/CN=localhost' -extensions EXT -config <( \
                printf '[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost,IP:$SERVER_DOMAIN\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth')
              echo 'Generated new SSL certificates'
            else
              echo 'SSL certificates already exist'
            fi
          "
        
      # Копирование файлов на сервер
      - name: Deploy to server
        run: |
          scp -v -r -o StrictHostKeyChecking=no \
            server.tar \
            bot.tar \
            .env \
            docker-compose.yml \
            nginx.shield.conf \
            prometheus.yml \
            loki-config.yaml \
            promtail-config.yaml \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}:$DEPLOY_PATH/

      # Загрузка Docker-образа и запуск контейнеров
      - name: Load Docker image and start containers
        run: |
          ssh -o StrictHostKeyChecking=no \
            ${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }} -p 22 "
            if ! command -v docker &> /dev/null; then
              echo 'Docker is not installed!'
              exit 1
            fi
            cd $DEPLOY_PATH
            
            # Update docker-compose.yml to include SSL volume for nginx
            if ! grep -q './ssl:/etc/nginx/ssl' docker-compose.yml; then
              sed -i '/volumes:/a\\      - ./ssl:/etc/nginx/ssl' docker-compose.yml
              echo 'Added SSL volume to docker-compose.yml'
            fi
            
            # Add 443 port mapping if not already present
            if ! grep -q '\"443:443\"' docker-compose.yml; then
              sed -i '/ports:/a\\      - \"443:443\"' docker-compose.yml
              echo 'Added port 443 mapping to docker-compose.yml'
            fi
            
            docker load -i bot.tar || { echo 'Failed to load bot image'; exit 1; }
            docker load -i server.tar || { echo 'Failed to load server image'; exit 1; }
            docker compose --env-file=.env up -d || { echo 'Failed to start containers'; exit 1; }
            echo 'Deployed!'
          "